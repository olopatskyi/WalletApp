// <auto-generated />
using System;
using WalletApp.Infrastructure.DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace WalletApp.Infrastructure.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    [Migration("20230611102608_AddClaimsToRole")]
    partial class AddClaimsToRole
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("WalletApp.Domain.Entities.Booking", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("BarberId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ClientId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ServiceId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("numeric");

                    b.HasKey("Id");

                    b.HasIndex("BarberId");

                    b.HasIndex("ClientId");

                    b.HasIndex("ServiceId");

                    b.ToTable("Bookings", (string)null);
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Client", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Clients", (string)null);
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Rank", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<double>("Coefficient")
                        .HasColumnType("double precision");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Ranks", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("17ff6de9-52d0-4eae-94a1-00e18a51939b"),
                            Coefficient = 1.0,
                            Status = 0
                        },
                        new
                        {
                            Id = new Guid("1c35ff11-df37-4d9c-9077-7ebf6a0d52fb"),
                            Coefficient = 1.2,
                            Status = 1
                        },
                        new
                        {
                            Id = new Guid("6eaf3ae3-6b4c-4829-9307-b8552f85d340"),
                            Coefficient = 1.3999999999999999,
                            Status = 2
                        });
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Service", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Services", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0e9876e-1f7e-4577-a056-65bc055680ab"),
                            LogoUrl = "http://localhost:3000/assets/icons/struzhka_icon.png",
                            Price = 200m,
                            Title = "Чоловіча стрижка"
                        },
                        new
                        {
                            Id = new Guid("65869337-602e-4294-97ee-65f6d34a4234"),
                            LogoUrl = "http://localhost:3000/assets/icons/machine_icon.png",
                            Price = 150m,
                            Title = "Стрижка машинкою"
                        },
                        new
                        {
                            Id = new Guid("4817abd2-f92e-4c63-9b24-753783f9f110"),
                            LogoUrl = "http://localhost:3000/assets/icons/golinya_icon.png",
                            Price = 150m,
                            Title = "Гоління"
                        },
                        new
                        {
                            Id = new Guid("e000b913-7a7a-4a6a-b002-a000b5482086"),
                            LogoUrl = "http://localhost:3000/assets/icons/ukladka_icon.png",
                            Price = 100m,
                            Title = "Професійна укладка"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("313f353f-2ac2-4e56-9904-8826767b9c6a"),
                            ConcurrencyStamp = "debf1c58-a326-4dcd-994d-0a1aee44f4d0",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("7b47b6c2-dd7c-4054-93a3-13764fafb71a"),
                            ConcurrencyStamp = "7220d6ef-9152-463e-a159-9d06c4912ff4",
                            Name = "Barber",
                            NormalizedName = "BARBER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 14,
                            ClaimType = "get:barber",
                            RoleId = new Guid("313f353f-2ac2-4e56-9904-8826767b9c6a")
                        },
                        new
                        {
                            Id = 15,
                            ClaimType = "create:barber",
                            RoleId = new Guid("313f353f-2ac2-4e56-9904-8826767b9c6a")
                        },
                        new
                        {
                            Id = 16,
                            ClaimType = "delete:barber",
                            RoleId = new Guid("313f353f-2ac2-4e56-9904-8826767b9c6a")
                        },
                        new
                        {
                            Id = 17,
                            ClaimType = "update:barber",
                            RoleId = new Guid("313f353f-2ac2-4e56-9904-8826767b9c6a")
                        },
                        new
                        {
                            Id = 18,
                            ClaimType = "get:client",
                            RoleId = new Guid("313f353f-2ac2-4e56-9904-8826767b9c6a")
                        },
                        new
                        {
                            Id = 19,
                            ClaimType = "create:client",
                            RoleId = new Guid("313f353f-2ac2-4e56-9904-8826767b9c6a")
                        },
                        new
                        {
                            Id = 20,
                            ClaimType = "delete:client",
                            RoleId = new Guid("313f353f-2ac2-4e56-9904-8826767b9c6a")
                        },
                        new
                        {
                            Id = 21,
                            ClaimType = "update:client",
                            RoleId = new Guid("313f353f-2ac2-4e56-9904-8826767b9c6a")
                        },
                        new
                        {
                            Id = 22,
                            ClaimType = "get:booking",
                            RoleId = new Guid("313f353f-2ac2-4e56-9904-8826767b9c6a")
                        },
                        new
                        {
                            Id = 23,
                            ClaimType = "create:booking",
                            RoleId = new Guid("313f353f-2ac2-4e56-9904-8826767b9c6a")
                        },
                        new
                        {
                            Id = 24,
                            ClaimType = "delete:booking",
                            RoleId = new Guid("313f353f-2ac2-4e56-9904-8826767b9c6a")
                        },
                        new
                        {
                            Id = 25,
                            ClaimType = "update:booking",
                            RoleId = new Guid("313f353f-2ac2-4e56-9904-8826767b9c6a")
                        },
                        new
                        {
                            Id = 26,
                            ClaimType = "get:booking",
                            RoleId = new Guid("7b47b6c2-dd7c-4054-93a3-13764fafb71a")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("21789e0e-1737-4545-862d-fc3fbae3bc6d"),
                            RoleId = new Guid("313f353f-2ac2-4e56-9904-8826767b9c6a")
                        },
                        new
                        {
                            UserId = new Guid("ce4bb7c0-6614-4fdd-b782-5e854ed803e7"),
                            RoleId = new Guid("7b47b6c2-dd7c-4054-93a3-13764fafb71a")
                        },
                        new
                        {
                            UserId = new Guid("66f07b70-0485-4740-98fb-7b68c9137db6"),
                            RoleId = new Guid("7b47b6c2-dd7c-4054-93a3-13764fafb71a")
                        },
                        new
                        {
                            UserId = new Guid("3615f116-6534-4566-a6ef-eace03040563"),
                            RoleId = new Guid("7b47b6c2-dd7c-4054-93a3-13764fafb71a")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Barber", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhotoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RankId")
                        .HasColumnType("uuid");

                    b.HasIndex("RankId");

                    b.ToTable("Barbers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ce4bb7c0-6614-4fdd-b782-5e854ed803e7"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1b3f3d63-1da4-4b90-90f7-032be9245de7",
                            Email = "maksym@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "MAKSYM@GMAIL.COM",
                            NormalizedUserName = "MAKSYM",
                            PasswordHash = "AQAAAAIAAYagAAAAEBJYxHpDyUApUeFzYShWJFfWy6k5z2rmTydKpXZ1M5FP6bYFriEH12M+UcvODYLyCQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4d0ab5af-2ef3-4f33-83fa-d76f197e5fff",
                            TwoFactorEnabled = false,
                            UserName = "Максим",
                            Description = "Працюю барбером вже 3 роки",
                            PhotoUrl = "http://localhost:3000/assets/img/first_barber.jpg",
                            RankId = new Guid("17ff6de9-52d0-4eae-94a1-00e18a51939b")
                        },
                        new
                        {
                            Id = new Guid("66f07b70-0485-4740-98fb-7b68c9137db6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c3985bae-2101-4de4-8856-4de108d75f7e",
                            Email = "denys@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "DENYS@GMAIL.COM",
                            NormalizedUserName = "DENYS",
                            PasswordHash = "AQAAAAIAAYagAAAAEO+/oMiFvIAZ1EeezVNHulhlLgkeqD/aBPjVarrXr9mAA24uRXjkXvSy354zl0Qg+Q==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "0a9c3078-3035-4da1-a71c-f44137784de3",
                            TwoFactorEnabled = false,
                            UserName = "Денис",
                            Description = "Зі мною можна поговорити",
                            PhotoUrl = "http://localhost:3000/assets/img/second_barber.jpg",
                            RankId = new Guid("1c35ff11-df37-4d9c-9077-7ebf6a0d52fb")
                        },
                        new
                        {
                            Id = new Guid("3615f116-6534-4566-a6ef-eace03040563"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c912d03f-d631-4004-9481-30e941f4be73",
                            Email = "artur@gmail.com",
                            EmailConfirmed = true,
                            LockoutEnabled = true,
                            NormalizedEmail = "ARTUR@GMAIL.COM",
                            NormalizedUserName = "Artur",
                            PasswordHash = "AQAAAAIAAYagAAAAEJf43FCiqbG6aiHa1j2LHJ7f1boLMtEY6qWrQJQOBW2fg6+DcYojBz2ZyE+Z6uSYxQ==",
                            PhoneNumber = "1234567890",
                            PhoneNumberConfirmed = true,
                            SecurityStamp = "4c5a46ea-2c57-46e6-b454-077f5da76ca6",
                            TwoFactorEnabled = false,
                            UserName = "Артур",
                            Description = "Доповню ваш образ гарною зачіскою",
                            PhotoUrl = "http://localhost:3000/assets/img/third_barber.jpg",
                            RankId = new Guid("6eaf3ae3-6b4c-4829-9307-b8552f85d340")
                        });
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Booking", b =>
                {
                    b.HasOne("WalletApp.Domain.Entities.Barber", "Barber")
                        .WithMany()
                        .HasForeignKey("BarberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WalletApp.Domain.Entities.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WalletApp.Domain.Entities.Service", "Service")
                        .WithMany()
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Barber");

                    b.Navigation("Client");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Barber", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser<System.Guid>", null)
                        .WithOne()
                        .HasForeignKey("WalletApp.Domain.Entities.Barber", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WalletApp.Domain.Entities.Rank", "Rank")
                        .WithMany("Barbers")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("WalletApp.Domain.Entities.Rank", b =>
                {
                    b.Navigation("Barbers");
                });
#pragma warning restore 612, 618
        }
    }
}
